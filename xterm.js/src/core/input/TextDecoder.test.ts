/**
 * Copyright (c) 2019 The xterm.js authors. All rights reserved.
 * @license MIT
 */

import { assert } from 'chai';
import { StringToUtf32, stringFromCodePoint, Utf8ToUtf32, utf32ToString } from 'core/input/TextDecoder';
import { encode } from 'utf8';

// convert UTF32 codepoints to string
function toString(data: Uint32Array, length: number): string {
  if ((String as any).fromCodePoint) {
    return (String as any).fromCodePoint.apply(null, data.subarray(0, length));
  }
  let result = '';
  for (let i = 0; i < length; ++i) {
    result += stringFromCodePoint(data[i]);
  }
  return result;
}

// convert "bytestring" (charCode 0-255) to bytes
function fromByteString(s: string): Uint8Array {
  const result = new Uint8Array(s.length);
  for (let i = 0; i < s.length; ++i) {
    result[i] = s.charCodeAt(i);
  }
  return result;
}

const TEST_STRINGS = [
  '–õ–æ—Ä–µ–º –∏–ø—Å—É–º –¥–æ–ª–æ—Ä —Å–∏—Ç –∞–º–µ—Ç, –µ—Ö —Å–µ–∞ –∞—Ü—Ü—É—Å–∞–º –¥–∏—Å—Å–µ–Ω—Ç–∏–µ—Ç. –ê–Ω –µ–æ—Å —Å—Ç–µ—Ç –µ–∏—Ä–º–æ–¥ –≤–∏—Ç—É–ø–µ—Ä–∞—Ç–∞. –ò—É—Å –¥–∏—Ü–µ—Ä–µ—Ç —É—Ä–±–∞–Ω–∏—Ç–∞—Å –µ—Ç. –ê–Ω –ø—Ä–∏ –∞–ª—Ç–µ—Ä–∞ –¥–æ–ª–æ—Ä–µ—Å —Å–ø–ª–µ–Ω–¥–∏–¥–µ, —Ü—É —è—É–æ –∏–Ω—Ç–µ–≥—Ä–µ –¥–µ–Ω–∏—è—É–µ, –∏–≥–Ω–æ—Ç–∞ –≤–æ–ª—É–ø—Ç–∞—Ä–∏–∞ –∏–Ω—Å—Ç—Ä—É—Ü—Ç–∏–æ—Ä —Ü—É –≤–∏–º.',
  '·Éö·Éù·É†·Éî·Éõ ·Éò·É§·É°·É£·Éõ ·Éì·Éù·Éö·Éù·É† ·É°·Éò·Éó ·Éê·Éõ·Éî·Éó, ·É§·Éê·É™·Éî·É† ·Éõ·É£·É™·Éò·É£·É° ·É™·Éù·Éú·É°·Éî·Éó·Éî·Éó·É£·É† ·Éß·É£·Éù ·Éò·Éì, ·É§·Éî·É† ·Éï·Éò·Éï·Éî·Éú·Éì·É£·Éõ ·Éß·É£·Éê·Éî·É†·Éî·Éú·Éì·É£·Éõ ·Éî·Éê, ·Éî·É°·Éó ·Éê·Éõ·Éî·Éó ·Éõ·Éù·Éï·Éî·Éó ·É°·É£·Éê·Éï·Éò·Éó·Éê·Éó·Éî ·É™·É£. ·Éï·Éò·Éó·Éê·Éî ·É°·Éî·Éú·É°·Éò·Éë·É£·É° ·Éê·Éú ·Éï·Éò·ÉÆ. ·Éî·ÉÆ·Éî·É†·É™·Éò ·Éì·Éî·Éó·Éî·É†·É†·É£·Éò·É°·É°·Éî·Éó ·É£·Éó ·Éß·É£·Éò. ·Éï·Éù·É™·Éî·Éú·Éó ·Éì·Éî·Éë·Éò·Éó·Éò·É° ·Éê·Éì·Éò·É§·Éò·É°·É™·Éò ·Éî·Éó ·É§·Éî·É†. ·Éú·Éî·É™ ·Éê·Éú ·É§·Éî·É£·Éí·Éê·Éò·Éó ·É§·Éù·É†·Éî·Éú·É°·Éò·Éë·É£·É° ·Éò·Éú·Éó·Éî·É†·Éî·É°·É°·Éî·Éó. ·Éò·Éì ·Éì·Éò·É™·Éù ·É†·Éò·Éì·Éî·Éú·É° ·Éò·É£·É°. ·Éì·Éò·É°·É°·Éî·Éú·Éó·Éò·Éî·Éó ·É™·Éù·Éú·É°·Éî·Éß·É£·É£·Éú·Éó·É£·É† ·É°·Éî·Éì ·Éú·Éî, ·Éú·Éù·Éï·É£·Éõ ·Éõ·É£·Éú·Éî·É†·Éî ·Éî·É£·Éõ ·Éê·Éó, ·Éú·Éî ·Éî·É£·Éõ ·Éú·Éò·É∞·Éò·Éö ·Éò·É†·Éê·É™·É£·Éú·Éì·Éò·Éê ·É£·É†·Éë·Éê·Éú·Éò·Éó·Éê·É°.',
  '‡§Ö‡§ß‡§ø‡§ï‡§æ‡§Ç‡§∂ ‡§Ö‡§Æ‡§ø‡§§‡§ï‡•Å‡§Æ‡§æ‡§∞ ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ú‡§æ‡§®‡•á ‡§™‡•ç‡§∞‡§∏‡§æ‡§∞‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§µ‡§ø‡§∂‡•ç‡§µ ‡§¶‡§æ‡§∞‡•Ä ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶‡§ï ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§Ç‡§∂ ‡§®‡§µ‡§Ç‡§¨‡§∞ ‡§µ‡§ø‡§∑‡§Ø ‡§ó‡§ü‡§ï‡§â‡§∏‡§ø ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ú‡§®‡§ø‡§§ ‡§™‡§∞‡§∏‡•ç‡§™‡§∞ ‡§ó‡§ü‡§ï‡§â‡§∏‡§ø ‡§Ö‡§®‡•ç‡§§‡§∞‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø‡§ï‡§∞‡§® ‡§π‡•ã‡§∏‡§ï‡•á ‡§Æ‡§æ‡§®‡§µ ‡§™‡•Å‡§∞‡•ç‡§£‡§§‡§æ ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§æ‡§≤‡§Ø ‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§æ‡§ß‡§®',
  'Ë¶ßÂÖ≠Â≠êÂΩìËÅûÁ§æË®àÊñáË≠∑Ë°åÊÉÖÊäïË∫´ÊñóÊù•„ÄÇÂ¢óËêΩ‰∏ñÁöÑÊ≥Å‰∏äÂ∏≠ÂÇôÁïåÂÖàÈñ¢Ê®©ËÉΩ‰∏á„ÄÇÊú¨Áâ©ÊåôÊ≠Ø‰π≥ÂÖ®‰∫ãÊê∫‰æõÊùøÊ†ÉÊûú‰ª•„ÄÇÈ†≠ÊúàÊÇ£Á´ØÊí§Á´∂Ë¶ãÁïåË®òÂºïÂéªÊ≥ïÊù°ÂÖ¨Ê≥äÂÄô„ÄÇÊ±∫Êµ∑ÂÇôÈßÜÂèñÂìÅÁõÆËä∏ÊñπÁî®ÊúùÁ§∫‰∏äÁî®Â†±„ÄÇË¨õÁî≥ÂãôÁ¥ôÁ¥ÑÈÄ±Â†ÇÂá∫ÂøúÁêÜÁî∞ÊµÅÂõ£Âπ∏Á®ø„ÄÇËµ∑‰øùÂ∏ØÂêâÂØæÈòúÂ∫≠ÊîØËÇØË±™ÂΩ∞Â±ûÊú¨Ë∫ç„ÄÇÈáèÊäëÁÜä‰∫ãÂ∫úÂãüÂãïÊ•µÈÉΩÊé≤‰ªÆË™≠Â≤∏„ÄÇËá™Á∂öÂ∑•Â∞±Êñ≠Â∫´ÊåáÂåóÈÄüÈÖçÈ≥¥Á¥Ñ‰∫ãÊñ∞‰ΩèÁ±≥‰ø°‰∏≠È®ì„ÄÇÂ©öÊµúË¢ãËëóÈáëÂ∏ÇÁîü‰∫§‰øù‰ªñÂèñÊÉÖË∑ù„ÄÇ',
  'ÂÖ´„É°„É´ÂãôÂïè„Å∏„Åµ„Çâ„ÅèÂçöËæûË™¨„ÅÑ„Çè„ÇáË™≠ÂÖ®„Çø„É®„É†„Ç±Êù±Ê†°„Å©„Å£Áü•Â£Å„ÉÜ„Ç±Á¶ÅÂéª„Éï„Éü‰∫∫ÈÅé„ÇíË£Ö5Èöé„Åå„Å≠„ÅúÊ≥ïÈÄÜ„ÅØ„ÅòÁ´Ø40ËêΩ„Éü‰∫àÁ´π„Éû„Éò„Éä„Çª‰ªª1ÊÇ™„Åü„ÄÇÁúÅ„Åú„Çä„ÅõË£ΩÊöá„Çá„Å∏„Åù„ÅëÈ¢®‰∫ï„Ç§Âä£Êâã„ÅØ„Åº„Åæ„ÅöÈÉµÂØåÊ≥ï„Åè‰ΩúÊñ≠„Çø„Ç™„Ç§ÂèñÂ∫ß„ÇÖ„Çá„ÅåÂá∫‰Ωú„Éõ„Ç∑ÊúàÁµ¶26Â≥∂„ÉÑ„ÉÅÁöáÈù¢„É¶„Éà„ÇØ„Ç§ÊöÆÁäØ„É™„ÉØ„Éä„É§Êñ≠ÈÄ£„Åì„ÅÜ„Åß„Å§Ëî≠ÊüîËñÑ„Å®„É¨„Å´„ÅÆ„ÄÇÊºî„ÇÅ„Åë„Åµ„Å±ÊêçÁî∞Ëª¢10ÂæóË¶≥„Å≥„Éà„Åí„ÅéÁéãÁâ©ÈâÑÂ§ú„Åå„Åæ„ÅëÁêÜÊÉú„Åè„Å°Áâ°Êèê„Å•ËªäÊÉëÂèÇ„Éò„Ç´„É¶„É¢Èï∑ËáìË∂ÖÊº´„Åº„Éâ„Åã„Çè„ÄÇ',
  'Î™®Îì† Íµ≠ÎØºÏùÄ ÌñâÏúÑÏãúÏùò Î≤ïÎ•†Ïóê ÏùòÌïòÏó¨ Î≤îÏ£ÑÎ•º Íµ¨ÏÑ±ÌïòÏßÄ ÏïÑÎãàÌïòÎäî ÌñâÏúÑÎ°ú ÏÜåÏ∂îÎêòÏßÄ ÏïÑÎãàÌïòÎ©∞. Ï†ÑÏßÅÎåÄÌÜµÎ†πÏùò Ïã†Î∂ÑÍ≥º ÏòàÏö∞Ïóê Í¥ÄÌïòÏó¨Îäî Î≤ïÎ•†Î°ú Ï†ïÌïúÎã§, Íµ≠ÌöåÎäî ÌóåÎ≤ï ÎòêÎäî Î≤ïÎ•†Ïóê ÌäπÎ≥ÑÌïú Í∑úÏ†ïÏù¥ ÏóÜÎäî Ìïú Ïû¨Ï†ÅÏùòÏõê Í≥ºÎ∞òÏàòÏùò Ï∂úÏÑùÍ≥º Ï∂úÏÑùÏùòÏõê Í≥ºÎ∞òÏàòÏùò Ï∞¨ÏÑ±ÏúºÎ°ú ÏùòÍ≤∞ÌïúÎã§. Íµ∞Ïù∏¬∑Íµ∞Î¨¥Ïõê¬∑Í≤ΩÏ∞∞Í≥µÎ¨¥Ïõê Í∏∞ÌÉÄ Î≤ïÎ•†Ïù¥ Ï†ïÌïòÎäî ÏûêÍ∞Ä Ï†ÑÌà¨¬∑ÌõàÎ†®Îì± ÏßÅÎ¨¥ÏßëÌñâÍ≥º Í¥ÄÎ†®ÌïòÏó¨ Î∞õÏùÄ ÏÜêÌï¥Ïóê ÎåÄÌïòÏó¨Îäî Î≤ïÎ•†Ïù¥ Ï†ïÌïòÎäî Î≥¥ÏÉÅÏô∏Ïóê Íµ≠Í∞Ä ÎòêÎäî Í≥µÍ≥µÎã®Ï≤¥Ïóê Í≥µÎ¨¥ÏõêÏùò ÏßÅÎ¨¥ÏÉÅ Î∂àÎ≤ïÌñâÏúÑÎ°ú Ïù∏Ìïú Î∞∞ÏÉÅÏùÄ Ï≤≠Íµ¨Ìï† Ïàò ÏóÜÎã§.',
  'ŸÉÿßŸÜ ŸÅÿ¥ŸÉŸëŸÑ ÿßŸÑÿ¥ÿ±ŸÇŸä ŸÖÿπ, Ÿàÿßÿ≠ÿØÿ© ŸÑŸÑŸÖÿ¨ŸáŸàÿØ ÿ™ÿ≤ÿßŸÖŸÜÿßŸã ÿ®ÿπÿ∂ ÿ®ŸÑ. Ÿàÿ™ŸÖ ÿ¨ŸÜŸàÿ® ŸÑŸÑÿµŸäŸÜ ÿ∫ŸäŸÜŸäÿß ŸÑŸÖ, ÿßŸÜ Ÿàÿ®ÿØŸàŸÜ ŸàŸÉÿ≥ÿ®ÿ™ ÿßŸÑÿ£ŸÖŸàÿ± ÿ∞ŸÑŸÉ, ÿ£ÿ≥ÿ± ÿßŸÑÿÆÿßÿ≥ÿ± ÿßŸÑÿßŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ© ŸáŸà. ŸÜŸÅÿ≥ ŸÑÿ∫ÿ≤Ÿà ŸÖŸàÿßŸÇÿπŸáÿß ŸáŸà. ÿßŸÑÿ¨Ÿà ÿπŸÑÿßŸÇÿ© ÿßŸÑÿµÿπÿØÿßÿ° ÿßŸÜŸá ÿ£Ÿä, ŸÉŸÖÿß ŸÖÿπ ÿ®ŸÖÿ®ÿßÿ±ŸÉÿ© ŸÑŸÑÿ•ÿ™ÿ≠ÿßÿØ ÿßŸÑŸàÿ≤ÿ±ÿßÿ°. ÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿ£ŸàŸÑŸâ ÿ£ŸÜ ÿ≠ÿØŸâ, ÿßŸÑÿ¥ÿ™ŸàŸäÿ© ÿ®ÿßÿ≥ÿ™ÿ≠ÿØÿßÿ´ ŸÖÿØŸÜ ÿ®ŸÑ, ŸÉÿßŸÜ ŸÇÿØ ÿ£Ÿàÿ≥ÿπ ÿπŸÖŸÑŸäÿ©. ÿßŸÑÿ£Ÿàÿ∂ÿßÿπ ÿ®ÿßŸÑŸÖÿ∑ÿßŸÑÿ®ÿ© ŸÉŸÑ ŸÇÿßŸÖ, ÿØŸàŸÜ ÿ•ÿ∞ ÿ¥ŸÖÿßŸÑ ÿßŸÑÿ±ÿ®Ÿäÿπÿå. ŸáŸèÿ≤ŸÖ ÿßŸÑÿÆÿßÿµŸëÿ© Ÿ£Ÿ† ÿ£ŸÖÿß, ŸÖÿßŸäŸà ÿßŸÑÿµŸäŸÜŸäÿ© ŸÖÿπ ŸÇÿ®ŸÑ.',
  '◊ê◊ï ◊°◊ì◊® ◊î◊ó◊ï◊ú ◊û◊ô◊ñ◊û◊ô ◊ß◊®◊ô◊û◊ô◊†◊ï◊ú◊ï◊í◊ô◊î. ◊ß◊î◊ô◊ú◊î ◊ë◊í◊®◊°◊î ◊ú◊ï◊ô◊ß◊ô◊§◊ì◊ô◊ù ◊ê◊ú ◊î◊ô◊ê, ◊©◊ú ◊¶◊¢◊ì ◊¶◊ô◊ï◊® ◊ï◊ê◊ú◊ß◊ò◊®◊ï◊†◊ô◊ß◊î. ◊û◊ì◊¢ ◊û◊î ◊ë◊®◊ô◊™ ◊î◊û◊ñ◊†◊ï◊ü ◊ê◊®◊õ◊ô◊ê◊ï◊ú◊ï◊í◊ô◊î, ◊ê◊ú ◊ò◊ë◊ú◊ê◊ï◊™ ◊û◊ë◊ï◊ß◊©◊ô◊ù ◊õ◊ú◊ú. ◊û◊ê◊û◊®◊©◊ô◊ó◊î◊¶◊§◊î ◊î◊¢◊®◊ô◊õ◊î◊í◊ô◊®◊°◊ê◊ï◊™ ◊©◊õ◊ú ◊ê◊ú, ◊õ◊™◊ë ◊¢◊ô◊¶◊ï◊ë ◊û◊ï◊©◊í◊ô ◊©◊ú. ◊ß◊ë◊ú◊ï ◊ß◊ú◊ê◊°◊ô◊ô◊ù ◊ë ◊û◊™◊ü. ◊†◊ë◊ó◊®◊ô◊ù ◊ê◊ï◊ï◊ô◊®◊ï◊†◊ê◊ï◊ò◊ô◊ß◊î ◊ê◊ù ◊û◊ú◊ê, ◊ú◊ï◊ó ◊ú◊û◊†◊ï◊¢ ◊ê◊®◊õ◊ô◊ê◊ï◊ú◊ï◊í◊ô◊î ◊û◊î. ◊ê◊®◊• ◊ú◊¢◊®◊ï◊ö ◊ë◊ß◊®◊ë◊™ ◊û◊ï◊†◊ó◊ï◊†◊ô◊ù ◊ê◊ï, ◊¢◊ñ◊®◊î ◊®◊ß◊ò◊ï◊™ ◊ú◊ï◊ô◊ß◊ô◊§◊ì◊ô◊ù ◊ê◊ó◊® ◊í◊ù.',
  '–õ–æ—Ä–µ–º ·Éö·Éù·É†·Éî·Éõ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§Ç‡§∂ Ë¶ßÂÖ≠Â≠ê ÂÖ´„É°„É´ Î™®Îì† ◊ë◊ß◊®◊ë◊™ üíÆ üòÇ √§ggg 123‚Ç¨ ùÑû.'
];

describe('text encodings', () => {
  it('stringFromCodePoint/utf32ToString', () => {
    const s = 'abcdefg';
    const data = new Uint32Array(s.length);
    for (let i = 0; i < s.length; ++i) {
      data[i] = s.charCodeAt(i);
      assert.equal(stringFromCodePoint(data[i]), s[i]);
    }
    assert.equal(utf32ToString(data), s);
  });

  describe('StringToUtf32 decoder', () => {
    describe('full codepoint test', () => {
      it('0..65535', () => {
        const decoder = new StringToUtf32();
        const target = new Uint32Array(5);
        for (let i = 0; i < 65536; ++i) {
          // skip surrogate pairs
          if (i >= 0xD800 && i <= 0xDFFF) {
            continue;
          }
          const length = decoder.decode(String.fromCharCode(i), target);
          assert.equal(length, 1);
          assert.equal(target[0], i);
          assert.equal(utf32ToString(target, 0, length), String.fromCharCode(i));
          decoder.clear();
        }
      });

      it('65536..0x10FFFF (surrogates)', function (): void {
        this.timeout(20000);
        const decoder = new StringToUtf32();
        const target = new Uint32Array(5);
        for (let i = 65536; i < 0x10FFFF; ++i) {
          const codePoint = i - 0x10000;
          const s = String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);
          const length = decoder.decode(s, target);
          assert.equal(length, 1);
          assert.equal(target[0], i);
          assert.equal(utf32ToString(target, 0, length), s);
          decoder.clear();
        }
      });
    });

    it('test strings', () => {
      const decoder = new StringToUtf32();
      const target = new Uint32Array(500);
      for (let i = 0; i < TEST_STRINGS.length; ++i) {
        const length = decoder.decode(TEST_STRINGS[i], target);
        assert.equal(toString(target, length), TEST_STRINGS[i]);
        decoder.clear();
      }
    });

    describe('stream handling', () => {
      it('surrogates mixed advance by 1', () => {
        const decoder = new StringToUtf32();
        const target = new Uint32Array(5);
        const input = '√Ñ‚Ç¨ùÑû√ñùÑû‚Ç¨√úùÑû‚Ç¨';
        let decoded = '';
        for (let i = 0; i < input.length; ++i) {
          const written = decoder.decode(input[i], target);
          decoded += toString(target, written);
        }
        assert(decoded, '√Ñ‚Ç¨ùÑû√ñùÑû‚Ç¨√úùÑû‚Ç¨');
      });
    });
  });

  describe('Utf8ToUtf32 decoder', () => {
    describe('full codepoint test', () => {

      it('0..65535 (1/2/3 byte sequences)', () => {
        const decoder = new Utf8ToUtf32();
        const target = new Uint32Array(5);
        for (let i = 0; i < 65536; ++i) {
          // skip surrogate pairs
          if (i >= 0xD800 && i <= 0xDFFF) {
            continue;
          }
          const utf8Data = fromByteString(encode(String.fromCharCode(i)));
          const length = decoder.decode(utf8Data, target);
          assert.equal(length, 1);
          assert.equal(toString(target, length), String.fromCharCode(i));
          decoder.clear();
        }
      });

      it('65536..0x10FFFF (4 byte sequences)', function (): void {
        this.timeout(20000);
        const decoder = new Utf8ToUtf32();
        const target = new Uint32Array(5);
        for (let i = 65536; i < 0x10FFFF; ++i) {
          const utf8Data = fromByteString(encode(stringFromCodePoint(i)));
          const length = decoder.decode(utf8Data, target);
          assert.equal(length, 1);
          assert.equal(target[0], i);
          decoder.clear();
        }
      });
    });

    it('test strings', () => {
      const decoder = new Utf8ToUtf32();
      const target = new Uint32Array(500);
      for (let i = 0; i < TEST_STRINGS.length; ++i) {
        const utf8Data = fromByteString(encode(TEST_STRINGS[i]));
        const length = decoder.decode(utf8Data, target);
        assert.equal(toString(target, length), TEST_STRINGS[i]);
        decoder.clear();
      }
    });

    describe('stream handling', () => {
      it('2 byte sequences - advance by 1', () => {
        const decoder = new Utf8ToUtf32();
        const target = new Uint32Array(5);
        const utf8Data = fromByteString('\xc3\x84\xc3\x96\xc3\x9c\xc3\x9f\xc3\xb6\xc3\xa4\xc3\xbc');
        let decoded = '';
        for (let i = 0; i < utf8Data.length; ++i) {
          const written = decoder.decode(utf8Data.slice(i, i + 1), target);
          decoded += toString(target, written);
        }
        assert(decoded, '√Ñ√ñ√ú√ü√∂√§√º');
      });

      it('2/3 byte sequences - advance by 1', () => {
        const decoder = new Utf8ToUtf32();
        const target = new Uint32Array(5);
        const utf8Data = fromByteString('\xc3\x84\xe2\x82\xac\xc3\x96\xe2\x82\xac\xc3\x9c\xe2\x82\xac\xc3\x9f\xe2\x82\xac\xc3\xb6\xe2\x82\xac\xc3\xa4\xe2\x82\xac\xc3\xbc');
        let decoded = '';
        for (let i = 0; i < utf8Data.length; ++i) {
          const written = decoder.decode(utf8Data.slice(i, i + 1), target);
          decoded += toString(target, written);
        }
        assert(decoded, '√Ñ‚Ç¨√ñ‚Ç¨√ú‚Ç¨√ü‚Ç¨√∂‚Ç¨√§‚Ç¨√º');
      });

      it('2/3/4 byte sequences - advance by 1', () => {
        const decoder = new Utf8ToUtf32();
        const target = new Uint32Array(5);
        const utf8Data = fromByteString('\xc3\x84\xe2\x82\xac\xf0\x9d\x84\x9e\xc3\x96\xf0\x9d\x84\x9e\xe2\x82\xac\xc3\x9c\xf0\x9d\x84\x9e\xe2\x82\xac');
        let decoded = '';
        for (let i = 0; i < utf8Data.length; ++i) {
          const written = decoder.decode(utf8Data.slice(i, i + 1), target);
          decoded += toString(target, written);
        }
        assert(decoded, '√Ñ‚Ç¨ùÑû√ñùÑû‚Ç¨√úùÑû‚Ç¨');
      });

      it('2/3/4 byte sequences - advance by 2', () => {
        const decoder = new Utf8ToUtf32();
        const target = new Uint32Array(5);
        const utf8Data = fromByteString('\xc3\x84\xe2\x82\xac\xf0\x9d\x84\x9e\xc3\x96\xf0\x9d\x84\x9e\xe2\x82\xac\xc3\x9c\xf0\x9d\x84\x9e\xe2\x82\xac');
        let decoded = '';
        for (let i = 0; i < utf8Data.length; i += 2) {
          const written = decoder.decode(utf8Data.slice(i, i + 2), target);
          decoded += toString(target, written);
        }
        assert(decoded, '√Ñ‚Ç¨ùÑû√ñùÑû‚Ç¨√úùÑû‚Ç¨');
      });

      it('2/3/4 byte sequences - advance by 3', () => {
        const decoder = new Utf8ToUtf32();
        const target = new Uint32Array(5);
        const utf8Data = fromByteString('\xc3\x84\xe2\x82\xac\xf0\x9d\x84\x9e\xc3\x96\xf0\x9d\x84\x9e\xe2\x82\xac\xc3\x9c\xf0\x9d\x84\x9e\xe2\x82\xac');
        let decoded = '';
        for (let i = 0; i < utf8Data.length; i += 3) {
          const written = decoder.decode(utf8Data.slice(i, i + 3), target);
          decoded += toString(target, written);
        }
        assert(decoded, '√Ñ‚Ç¨ùÑû√ñùÑû‚Ç¨√úùÑû‚Ç¨');
      });
    });
  });
});
